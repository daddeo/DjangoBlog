---------------------------------------------------

Part 1 - Getting Started

install django
Successfully installed asgiref-3.2.7 django-3.0.5 pytz-2019.3 sqlparse-0.3.1

> DjangoBlog>python -m django --version
3.0.5

lists subcommands available
> django-admin

starts our project will boilerplate files
> django-admin startproject project

install pylint
Successfully installed astroid-2.3.3 colorama-0.4.3 isort-4.3.21 lazy-object-proxy-1.4.3 mccabe-0.6.1 pylint-2.4.4 six-1.14.0 wrapt-1.11.2

start the web server
> python manage.py runserver

in browser hit
http://localhost:8000/admin

---------------------------------------------------

Part 2 - Applications and Routes

a single project can contain multiple apps (e.g. blog, store)

create a new app
> python manage.py startapp blog

---------------------------------------------------

Part 3 - Templates


---------------------------------------------------

Part 4 - Admin page

create admin account (needs db first)

1. detects changes in db and prepares to run migration
> python manage.py makemigrations

2. create db
> python manage.py migrate

3. create admin account
> python manage.py createsuperuser
username {dad}
email {gmail}
password {standard medium}

4. add user1, TestPassword123

---------------------------------------------------

Part 5 - Database and Migrations

Django has it's own built-in Object Relational Mapper (ORM)
to work with database.

after altering model classes (db classes), run migration
> python manage.py makemigrations

Migrations for 'blog':
  blog\migrations\0001_initial.py
    - Create model Post

to seet the actual SQL that will be run:
> python manage.py sqlmigrate blog 0001

BEGIN;
--
-- Create model Post
--
CREATE TABLE "blog_post" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "title" varchar(100) NOT NULL, "content" text NOT NULL, "created" datetime NOT NULL, "posted" datetime NOT NULL, "updated" datetime NOT NULL, "author_id" integer NOT NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE INDEX "blog_post_author_id_dd7a8485" ON "blog_post" ("author_id");
COMMIT;

run migration
> python manage.py migrate

Operations to perform:
  Apply all migrations: admin, auth, blog, contenttypes, sessions
Running migrations:
  Applying blog.0001_initial... OK

The Django ORM shell let's us interactively do the same thing line by line
> python manage.py shell
>>> from blog.models import Post
>>> from django.contrib.auth.models import User
>>> User.objects.all()
<QuerySet [<User: dad>, <User: user1>]>
>>> User.objects.first()
<User: dad>
>>> User.objects.filter(username="user1")
<QuerySet [<User: user1>]>
>>> user = User.objects.filter(username="user1").first()
>>> user
<User: user1>
>>> user.pk
2
>>> user.id
2
>>> user.username
'user1'
>>> user = User.objects.get(id=1)
>>> user
<User: dad>
>>> Post.objects.all()
<QuerySet []>
>>> post1 = Post(title="Blog 1", content="First Post Content.", author=user)
>>> post1
<Post: Post object (None)>
>>> Post.objects.all()
<QuerySet []>
>>> post1.save()
>>> Post.objects.all()
<QuerySet [<Post: Post object (1)>]>

added __str__ function to Post() and restarted shell
>>> Post.objects.all()
<QuerySet [<Post: Blog 1>]>
>>> user = User.objects.filter(username="user1").first()
>>> post = Post(title="Blog 2", content="Second Post Content.", author_id=user.id)
>>> post.save()
>>> Post.objects.all()
<QuerySet [<Post: Blog 1>, <Post: Blog 2>]>
>>> post = Post.objects.first()
>>> post
<Post: Blog 1>
>>> post.content
'First Post Content.'
>>> post.posted
datetime.datetime(2020, 4, 4, 2, 59, 20, 579093, tzinfo=<UTC>)
>>> post.created
datetime.datetime(2020, 4, 4, 3, 0, 12, 116285, tzinfo=<UTC>)
>>> post.updated
datetime.datetime(2020, 4, 4, 3, 0, 12, 116285, tzinfo=<UTC>)
>>> post.author
<User: dad>
>>> post.author.email
'jason.wallenfang@gmail.com'
>>> post.author.username
'dad'

to get all posts written by a particular user
can get the user then query posts filtering by user, but django adds a special option
in form of {object}.{modelname}_set

>>> user.post_set
<django.db.models.fields.related_descriptors.create_reverse_many_to_one_manager.<locals>.RelatedManager object at 0x000001D0DE1CB7C0>
>>> user.post_set.all()
<QuerySet [<Post: Blog 2>]>
>>> user.post_set.create(title="Blog 3", content="Third Post Content.")
<Post: Blog 3>
>>> user.post_set.all()
<QuerySet [<Post: Blog 2>, <Post: Blog 3>]>
>>> Post.objects.all()
<QuerySet [<Post: Blog 1>, <Post: Blog 2>, <Post: Blog 3>]>


in blog app directory, open admin.py, add our models
and can edit model and objects in the admin page

---------------------------------------------------

Part 6 - User Registration

add users app
> python manage.py startapp users

crispy-form (for styling forms in a bootstrap fashion in Django)
install crispy-forms
> python -m pip install django-crispy-forms

add crispy-forms to project/settings.py file INSTALLED_APPS

---------------------------------------------------

Part 7 - Login and Logout System

---------------------------------------------------

Part 8 - User Profile and Picture

* install pillow for managing images
> python -m pip install Pillow

> python manage.py makemigrations
Migrations for 'users':
  users\migrations\0001_initial.py
    - Create model Profile

> python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, blog, contenttypes, sessions, users
Running migrations:
  Applying users.0001_initial... OK

* now register profile model in users app (admin.py)

* look at user profile interactively
> python manage.py shell
>>> from django.contrib.auth.models import User
>>> user = User.objects.filter(username="dad").first()
>>> user
<User: dad>
>>> user.profile
<Profile: dad Profile>
>>> user.profile.image
<ImageFieldFile: images/avatar.png>
>>> user.profile.image.width
1840
>>> user.profile.image.height
1840
>>> user.profile.image.size
84402
>>> user.profile.image.url
'images/avatar.png'
>>> user = User.objects.filter(username="user1").first()
>>> user
<User: user1>
>>> user.profile.image
<ImageFieldFile: default.jpg>
>>> user.profile.image.url
'default.jpg'

* copy default.jpg into media folder

---------------------------------------------------

Part 9 - Update User Profile

---------------------------------------------------

